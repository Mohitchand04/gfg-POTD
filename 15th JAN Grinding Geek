//1st - recursion gives tle
//User function Template for Java
class Solution {
    public int max_courses(int n, int total, int[] cost) {
        // code here
        return func(total,cost,0);
    }    
    public int func(int moneyLeft,int[] cost,int i){
        if(i == cost.length){
            return 0;
        }
        if(moneyLeft>=cost[i]){
            int prize = cost[i]-((9*cost[i])/10);
            int take = func(moneyLeft-prize,cost,i+1)+1;
            int notTake = func(moneyLeft,cost,i+1);
            return Math.max(take, notTake);
        }
        return func(moneyLeft,cost,i+1);
    }
}

//2nd - memoization dp
class Solution {
    public int max_courses(int n, int total, int[] cost) {
        // code here
        int dp[][] = new int[n][total+1];
        for(int[] i : dp){
            Arrays.fill(i,-1);
        }
        return func(total,cost,0,dp);
    }    
    public int func(int moneyLeft,int[] cost,int i,int[][] dp){
        if(i == cost.length){
            return 0;
        }
        if(dp[i][moneyLeft]!=-1){
            return dp[i][moneyLeft];
        }
        if(moneyLeft>=cost[i]){
            int prize = cost[i]-((9*cost[i])/10);
            int take = func(moneyLeft-prize,cost,i+1,dp)+1;
            int notTake = func(moneyLeft,cost,i+1,dp);
            return dp[i][moneyLeft]=Math.max(take, notTake);
        }
        return dp[i][moneyLeft]=func(moneyLeft,cost,i+1,dp);
    }
}
