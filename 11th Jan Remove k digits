//Remove K Digits

1st-Approach -- this will give TLE 
public String removeKdigits(String num, int k) {
        StringBuilder sb = new StringBuilder(num);
        while (k > 0) {
            int i = 0;
            //find the peak
            while (i < sb.length() - 1 && sb.charAt(i) <= sb.charAt(i + 1)) {
                i++;
            }
            //delete the peak
            sb.deleteCharAt(i);
            k--;
        }
        //remove the leading 0s
        while (sb.toString().startsWith("0")) {
         sb.deleteCharAt(0);
        }
        return sb.length() == 0 ? "0" : sb.toString();
    }

2nd -- using stack here we used monotonic stack concept if the peek > than current ch we kepth on popping and keeping the occurrence of 0 in the starting position
class Solution {
    public String removeKdigits(String s, int k) {
        if(s.length()==k) return "0";
        Stack<Character> st = new Stack<>();
        for(char ch : s.toCharArray()){
            while(st.size()>0 && k>0 && ch<st.peek()){
                st.pop();
                k--;
            }
            if(st.isEmpty() && ch=='0') continue;
            else st.push(ch);
        }
        while(!st.isEmpty() && k>0){
            st.pop();
            k--;
        }
        if(st.size()==0) return "0";
        StringBuilder sb = new StringBuilder();
        while(!st.isEmpty()){
            char ch = st.pop();
            sb.append(ch);
        }        
        return sb.reverse().toString();
    }
}
